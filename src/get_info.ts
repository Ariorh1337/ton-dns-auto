import { TonClient, Address } from '@ton/ton';
import { AutoDNS } from './auto_dns';
import * as dotenv from 'dotenv';
import { delay } from './extra/delay';

dotenv.config();

async function main() {
    if (!process.env.DNS_AUTO_CONTRACT_ADDRESS) {
        throw new Error('DNS_AUTO_CONTRACT_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    }

    const key = process.argv[2];
    const subdomain = process.argv[3];

    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ TON...');
    const client = new TonClient({
        endpoint: process.env.TON_ENDPOINT || 'https://toncenter.com/api/v2/jsonRPC',
        apiKey: process.env.TON_API_KEY
    });

    console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    const autoDNS = AutoDNS.createFromAddress(Address.parse(process.env.DNS_AUTO_CONTRACT_ADDRESS));

    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const owner = await autoDNS.getOwner(client.provider(autoDNS.address));
    console.log('–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', owner.toString());

    // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    if (!process.env.TON_API_KEY) {
        await delay(10000);
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–ª—é—á, –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
    if (key) {
        const record = await autoDNS.getRecord(client.provider(autoDNS.address), key);
        console.log('–ó–∞–ø–∏—Å—å:', record ? {
            category: record.category,
            value: record.value.toString()
        } : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

        // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        if (!process.env.TON_API_KEY) {
            await delay(10000);
        }
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–¥–¥–æ–º–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if (subdomain) {
        const subdomainOwner = await autoDNS.getSubdomainOwner(client.provider(autoDNS.address), subdomain);
        console.log('–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–¥–¥–æ–º–µ–Ω–∞:', subdomainOwner?.toString() || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

main().catch(e => console.error('‚ùå –û—à–∏–±–∫–∞:', e)); 