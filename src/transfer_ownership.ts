import { TonClient, WalletContractV4, internal, toNano, Address, beginCell } from '@ton/ton';
import { mnemonicToWalletKey } from '@ton/crypto';
import { delay } from './extra/delay';
import { AutoDNS } from './auto_dns';
import * as dotenv from 'dotenv';

dotenv.config();

async function main() {
    if (!process.env.MNEMONIC) {
        throw new Error('MNEMONIC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    }

    if (!process.env.DNS_AUTO_CONTRACT_ADDRESS) {
        throw new Error('DNS_AUTO_CONTRACT_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    }

    const newOwner = process.argv[2];

    if (!newOwner) {
        throw new Error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ts-node transfer_ownership.ts <new_owner_address>');
    }

    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ TON...');
    const client = new TonClient({
        endpoint: process.env.TON_ENDPOINT || 'https://toncenter.com/api/v2/jsonRPC',
        apiKey: process.env.TON_API_KEY
    });

    console.log('üîë –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∫–æ—à–µ–ª—å–∫–∞...');
    const mnemonics = process.env.MNEMONIC.trim().split(' ');
    const keyPair = await mnemonicToWalletKey(mnemonics);

    const wallet = client.open(
        WalletContractV4.create({ publicKey: keyPair.publicKey, workchain: 0 })
    );

    console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    const autoDNS = AutoDNS.createFromAddress(Address.parse(process.env.DNS_AUTO_CONTRACT_ADDRESS));

    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞...');
    await delay(10000);
    const seqno = await wallet.getSeqno();

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏...');
    await wallet.sendTransfer({
        seqno,
        secretKey: keyPair.secretKey,
        messages: [
            internal({
                to: autoDNS.address,
                value: toNano('0.1'),
                body: beginCell()
                    .storeUint(0x34567890, 32)  // op = transfer
                    .storeAddress(Address.parse(newOwner))
                    .endCell(),
                bounce: true,
            }),
        ],
    });

    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    await delay(30000);

    // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    if (!process.env.TON_API_KEY) {
        await delay(10000);
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞...');
    const owner = await autoDNS.getOwner(client.provider(autoDNS.address));
    console.log('–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü:', owner.toString());
}

main().catch(e => console.error('‚ùå –û—à–∏–±–∫–∞:', e)); 